import { defineStore } from 'pinia'
import { Names } from './store-namespace'

type Result = {
  name: string,
  isChu: boolean
}

const Login = (): Promise<Result> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        name: '小张',
        isChu: true
      })
    }, 3000) 
  })
}

export const useTestStore = defineStore(Names.Test,{
  state:()=> {
    return {
      current: 1,
      age: 200,
      user: <Result>{},
      // user: {}
      name: 'default'
    }
  },
  getters: {
    newPrice:(state) => `$${state.user.name}`,
    newCurrent ():number | string {
      return ++this.current + this.newName
    },
    newName ():string {
      return `$-${this.name}`
    }

  },
  actions: {
    setCurrent () {
      this.current++
    },
    randomizeCounter() {
      this.current = Math.round(100 * Math.random())
    },
    async getLoginInfo() {
      const result = await Login()
      this.user = result;
      this.setName(result.name)
    },
    setName (name: string){
      this.name = name
    }
  }
})

import { ref } from 'vue'
import { useTestStore } from '../store'
import { storeToRefs } from 'pinia'

const Test = useTestStore()
// 直接解构是会失去响应性的
const { current, age } = storeToRefs(Test)
console.log(current, age);

const Add = () => {
  // 直接修改值
  // Test.current++
  // 批量修改State的值
  // Test.$patch({
  //   current: 200,
  //   age: 300
  // })
  // 批量修改函数形式
  // Test.$patch((state)=>{
  //   state.current++;
  //   state.age = 40
  // })
  // 通过原始对象修改整个实例
  // Test.$state = {
  //   current: 10,
  //   age: 30
  // }
  // 通过actions修改
  // Test.setCurrent()
  // Test.randomizeCounter()
  Test.getLoginInfo()
}

const change = () => {
   Test.current++
}
const reset = () => {
   Test.$reset()
}
// 类似于Vuex 的abscribe  只要有state 的变化就会走这个函数,如果你的组件卸载之后还想继续调用请设置第二个参数
Test.$subscribe((args,state)=>{
  console.log(args,state);
},{
  detached:true
})
// 只要有actions被调用就会走这个函数
Test.$onAction((args)=>{
  args.after(()=>{
    console.log('after');
  })
  console.log(args, 'onAction');
},true)

defineProps<{ msg: string }>()

const count = ref(0)
</script>

<template>
  <h1>{{ msg }}</h1>

  <div class="card">
    <button type="button" @click="Add">+</button>
    <button type="button" @click="reset">reset</button>
    <!-- <div>count is {{ Test.current }}</div>
    <div>{{ Test.age }}</div> -->
   
    <!-- <div>origin value {{Test.current}}</div>
    <div>
      pinia:{{ current }}--{{ age }}
      change :
      <button @click="change">change</button>
    </div> -->
    <div>{{ Test.user }}</div>
    <!-- <div>{{ Test.name }}</div>
    <div>{{ Test.newPrice }}</div>
    <div>{{ Test.newName }}</div>
    <div>{{ Test.newCurrent }}</div> -->
  </div>
</template>
